// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	kindsv1 "github.com/grafana/grafana-apiserver/pkg/apis/kinds/v1"
	clientset "github.com/grafana/grafana-apiserver/pkg/client/clientset/clientset"
	internalinterfaces "github.com/grafana/grafana-apiserver/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/grafana/grafana-apiserver/pkg/client/listers/kinds/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// GrafanaResourceDefinitionInformer provides access to a shared informer and lister for
// GrafanaResourceDefinitions.
type GrafanaResourceDefinitionInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.GrafanaResourceDefinitionLister
}

type grafanaResourceDefinitionInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewGrafanaResourceDefinitionInformer constructs a new informer for GrafanaResourceDefinition type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewGrafanaResourceDefinitionInformer(client clientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredGrafanaResourceDefinitionInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredGrafanaResourceDefinitionInformer constructs a new informer for GrafanaResourceDefinition type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredGrafanaResourceDefinitionInformer(client clientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KindsV1().GrafanaResourceDefinitions().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KindsV1().GrafanaResourceDefinitions().Watch(context.TODO(), options)
			},
		},
		&kindsv1.GrafanaResourceDefinition{},
		resyncPeriod,
		indexers,
	)
}

func (f *grafanaResourceDefinitionInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredGrafanaResourceDefinitionInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *grafanaResourceDefinitionInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kindsv1.GrafanaResourceDefinition{}, f.defaultInformer)
}

func (f *grafanaResourceDefinitionInformer) Lister() v1.GrafanaResourceDefinitionLister {
	return v1.NewGrafanaResourceDefinitionLister(f.Informer().GetIndexer())
}
