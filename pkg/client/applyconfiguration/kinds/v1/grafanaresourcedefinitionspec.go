// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	kindsv1 "github.com/grafana/grafana-apiserver/pkg/apis/kinds/v1"
)

// GrafanaResourceDefinitionSpecApplyConfiguration represents an declarative configuration of the GrafanaResourceDefinitionSpec type for use
// with apply.
type GrafanaResourceDefinitionSpecApplyConfiguration struct {
	Group                 *string                                              `json:"group,omitempty"`
	Names                 *GrafanaResourceDefinitionNamesApplyConfiguration    `json:"names,omitempty"`
	Scope                 *kindsv1.ResourceScope                               `json:"scope,omitempty"`
	Versions              []GrafanaResourceDefinitionVersionApplyConfiguration `json:"versions,omitempty"`
	PreserveUnknownFields *bool                                                `json:"preserveUnknownFields,omitempty"`
}

// GrafanaResourceDefinitionSpecApplyConfiguration constructs an declarative configuration of the GrafanaResourceDefinitionSpec type for use with
// apply.
func GrafanaResourceDefinitionSpec() *GrafanaResourceDefinitionSpecApplyConfiguration {
	return &GrafanaResourceDefinitionSpecApplyConfiguration{}
}

// WithGroup sets the Group field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Group field is set to the value of the last call.
func (b *GrafanaResourceDefinitionSpecApplyConfiguration) WithGroup(value string) *GrafanaResourceDefinitionSpecApplyConfiguration {
	b.Group = &value
	return b
}

// WithNames sets the Names field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Names field is set to the value of the last call.
func (b *GrafanaResourceDefinitionSpecApplyConfiguration) WithNames(value *GrafanaResourceDefinitionNamesApplyConfiguration) *GrafanaResourceDefinitionSpecApplyConfiguration {
	b.Names = value
	return b
}

// WithScope sets the Scope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scope field is set to the value of the last call.
func (b *GrafanaResourceDefinitionSpecApplyConfiguration) WithScope(value kindsv1.ResourceScope) *GrafanaResourceDefinitionSpecApplyConfiguration {
	b.Scope = &value
	return b
}

// WithVersions adds the given value to the Versions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Versions field.
func (b *GrafanaResourceDefinitionSpecApplyConfiguration) WithVersions(values ...*GrafanaResourceDefinitionVersionApplyConfiguration) *GrafanaResourceDefinitionSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVersions")
		}
		b.Versions = append(b.Versions, *values[i])
	}
	return b
}

// WithPreserveUnknownFields sets the PreserveUnknownFields field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PreserveUnknownFields field is set to the value of the last call.
func (b *GrafanaResourceDefinitionSpecApplyConfiguration) WithPreserveUnknownFields(value bool) *GrafanaResourceDefinitionSpecApplyConfiguration {
	b.PreserveUnknownFields = &value
	return b
}
